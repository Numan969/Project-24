name: Frontend CI -> Artifact -> Deploy to Vercel

on:
  push:
    branches: [ main ]           # change to your branch
    paths:
      - 'Frontend/**'            # only trigger when Frontend files change

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  id-token: write

jobs:
  build_and_package:
    name: Build frontend & create artifact
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: Frontend
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'
          cache-dependency-path: Frontend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run tests (if present)
        run: |
          if npm run | grep -q "test"; then
            npm test --if-present -- --ci || true
          else
            echo "No test script; skipping tests."
          fi

      - name: Build
        run: npm run build

      - name: Zip dist into artifact
        run: |
          mkdir -p ../artifacts
          cd dist || exit 0
          zip -r ../artifacts/frontend-dist.zip . || true

      - name: Upload frontend artifact
        uses: actions/upload-artifact@v4
        with:
          name: frontend-zip
          path: artifacts/frontend-dist.zip

  deploy_to_vercel:
    name: Deploy to Vercel
    runs-on: ubuntu-latest
    needs: build_and_package
    environment:
      name: production
      url: ${{ steps.vercel_out.outputs.url }}
    steps:
      - name: Checkout (needed for Actions metadata)
        uses: actions/checkout@v4

      - name: Download frontend artifact
        uses: actions/download-artifact@v4
        with:
          name: frontend-zip
          path: downloaded_artifact

      - name: Unzip artifact
        run: |
          mkdir -p downloaded_artifact/unzipped
          unzip downloaded_artifact/frontend-dist.zip -d downloaded_artifact/unzipped || true
          ls -la downloaded_artifact/unzipped

      - name: Install Vercel CLI
        run: npm i -g vercel

      - name: Deploy to Vercel (prod)
        id: vercel_out
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          # Optional (uncomment if you set them in Secrets):
          # VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          # VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
        run: |
          # If you have linked your local project to Vercel previously, the CLI will know the project.
          # Prefer non-interactive deploy using token and explicit project id if possible.
          if [ -n "${VERCEL_PROJECT_ID}" ]; then
            echo "Deploying to Vercel using project id..."
            vercel --prod --token "$VERCEL_TOKEN" --confirm --cwd downloaded_artifact/unzipped --project "$VERCEL_PROJECT_ID"
          else
            echo "Deploying to Vercel (auto-detect project). Make sure project is linked on Vercel dashboard."
            vercel --prod --token "$VERCEL_TOKEN" --confirm --cwd downloaded_artifact/unzipped
          fi
          # optional: print the url returned (vercel prints it in stdout)

